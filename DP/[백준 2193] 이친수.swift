//
//  [백준 2193] 이친수.swift
//  Algorithm
//
//  Created by 김민 on 2/21/24.
//
// 백준 2193 이친수 https://www.acmicpc.net/problem/2193

/*
[✅ 풀이]
i 자릿수의 이친수 중
끝자리가 0인 개수는 i-1 자릿수 중 끝자리가 0인 개수 + i-1 자릿수 중 끝자리가 1인 개수
i-1 자릿수의 이친수 중 끝자리가 0, 1 모두에 0을 붙일 수 있다.

끝자리가 1인 개수는 i-1 자릿수 중 끝자리가 0인 개수이다.
i-1 자릿수의 이친수 중 끝자리가 0인 것에만 1을 붙일 수 있다.

dp[i]를 i자리의 이친수들의 끝자리가 0인 수 개수, 끝자리가 1인 수 개수로 나타내어 풀이했다.
*/

let n = Int(readLine()!)!
var dp = Array(repeating: (0, 0), count: 93) // (끝자리가 0인 수 개수, 끝자리가 1인 수 개수)

dp[1] = (0, 1)

for i in 2...90 {
    dp[i].0 = dp[i-1].0 + dp[i-1].1
    dp[i].1 = dp[i-1].0
}

print(dp[n].0 + dp[n].1)


/*
[✅ 풀이]
이친수의 조건을 사용하면 모든 이친수의 시작은 10이다. (0으로 시작하면 안 되고, 11이 생길 수 없으므로)
이를 이용하면
i = 1) 1
i = 2) 10
i = 3) 100 101
i = 4) 1000 1001 1010
i = 5) 10000 10001 10010 10100 10101
i 자릿수의 이친수는 맨앞 두 자리인 20을 제외한 나머지는 i-1 자릿수, i-2 자릿수의 이친수의 경우를 모두 포함함을 알 수 있다.
이를 이용하여 dp[i] = dp[i-1] + dp[i-2]로 풀이할 수 있다.

*/
//let n = Int(readLine()!)!
//var dp = Array(repeating: 0, count: 93)
//
//dp[1] = 1
//
//for i in 2...90 {
//    dp[i] = dp[i-1] + dp[i-2]
//}
//
//print(dp[n])
